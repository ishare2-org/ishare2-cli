#!/bin/bash
# Date: October 2022
# Authors: @mativ00 & @sudoalx on Telegram
# Description: This script is used to download images from the internet and install them in PNetLab.
# Version: 3.0-alpha
# Last Updated: 2023-04-23

# ishare2 configuration
CHANNEL="main" # you can change this to available branches in github.com/ishare-org/ishare2-cli
ISHARE2_DIR="/opt/ishare2/cli"
JSON_URL="https://github.com/ishare2-org/mirrors/raw/main/index.gd.json"
TEMP_JSON="$ISHARE2_DIR/tmp/ishare2.json"
VERSION="v3.0-alpha" # Script version

# Colors
RED='\033[31m'
YELLOW='\033[1;33m'
GREEN='\033[32m'
BLUE='\033[34m'
NO_COLOR='\033[0m'

function print_separator() {
    local TITLE=$1
    local WIDTH=${#TITLE}
    local SEPARATOR=""

    # Calculate the required number of '=' characters to create the separator
    for ((i = 0; i < WIDTH + 8; i++)); do
        SEPARATOR+="="
    done

    echo -e "${BLUE}$SEPARATOR${NO_COLOR}"
    echo -e "\033[1;33m    ${TITLE}    \033[0m"
    echo -e "${BLUE}$SEPARATOR${NO_COLOR}"
}

function check_ishare2_dir() {
    # check if ishare2 directory exists otherwise create it
    if [[ ! -d $ISHARE2_DIR ]]; then
        create_ishare2_dir
    fi
}

# set max log file lines to 1000
function set_max_log_lines() {
    if [[ -f $ISHARE2_DIR/logs.txt ]]; then
        if [[ $(wc -l <"$ISHARE2_DIR/logs.txt") -gt 1000 ]]; then
            tail -n 1000 $ISHARE2_DIR/logs.txt >$ISHARE2_DIR/tmp.txt
            mv $ISHARE2_DIR/tmp.txt $ISHARE2_DIR/logs.txt
        fi
    fi
}

function check_config() {
    # check if config file exists
    if [[ ! -f $ISHARE2_DIR/ishare2.conf ]]; then
        create_config
    fi
    # check if config file is empty
    if [[ ! -s $ISHARE2_DIR/ishare2.conf ]]; then
        echo -e "${RED} [!] Configuration file is empty. Please configure ishare2.${NO_COLOR}"
        create_config
    fi
    # check if config file is valid
    validate_conf_file
}

function switch_downloader() {
    # check if config file exists
    if [[ ! -f $ISHARE2_DIR/ishare2.conf ]]; then
        echo -e "{$YELLOW} [!] Configuration file does not exist. Please configure ishare2.${NO_COLOR}"
    fi
    if [[ ! -s $ISHARE2_DIR/ishare2.conf ]]; then
        echo -e "${RED} [!] Configuration file is empty. Please configure ishare2.${NO_COLOR}"
    fi
    create_config
}

function create_config() {
    echo -e "${YELLOW} [*] Creating ishare2 configuration file...${NO_COLOR}"
    echo -e "${YELLOW} [*] Please answer the following questions to configure ishare2.${NO_COLOR}"
    echo -e "${YELLOW} [*] Press enter to use the default values which should work out of the box.${NO_COLOR}"
    echo -e "${YELLOW} [*] Press Ctrl+C to cancel.${NO_COLOR}"
    # Ask whether to use aria2c or not
    echo -e "${YELLOW} [+] Use aria2c for faster downloads?${NO_COLOR}"
    read -p " [+] (y/n): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW} [!] Using aria2c allows you to download files faster, however, many users reported having issues with it.\nTo disable it, run: ishare2 config and answer no to the question.${NO_COLOR}"
        echo "USE_ARIA2C=true" >$ISHARE2_DIR/ishare2.conf
        install_aria2c
        echo "Press any key to continue..."
        read -n 1
    else
        echo -e "${YELLOW} [!] Using wget is slower than aria2c, however, it is more stable.\nTo enable aria2c, run: ishare2 config and answer yes to this question.${NO_COLOR}"
        echo "USE_ARIA2C=false" >$ISHARE2_DIR/ishare2.conf
        echo "Press any key to continue..."
        read -n 1
    fi

    # Ask if SSL certificate should be checked
    echo -e "${YELLOW} [+] Check SSL certificate? (default: yes)${NO_COLOR}"
    read -p " [+] (y/n): " -r
    case $REPLY in
    [Nn])
        SSL_CHECK=false
        ;;
    *)
        SSL_CHECK=true
        ;;
    esac
    echo "SSL_CHECK=\"$SSL_CHECK\"" >>$ISHARE2_DIR/ishare2.conf

    # Ask for the channel value
    echo -e "${YELLOW} [+] Choose the update channel.${NO_COLOR}"
    echo "  1) main"
    read -p " [+] Enter the update channel option (default: 1): " -r
    case $REPLY in
    1)
        CHANNEL="main"
        ;;
    *)
        CHANNEL="main"
        ;;
    esac
    echo "CHANNEL=\"$CHANNEL\"" >>$ISHARE2_DIR/ishare2.conf

    # Validate the configuration file
    if [ ! -f "$ISHARE2_DIR/ishare2.conf" ]; then
        echo -e "${RED} [!] Failed to create configuration file. Please try again.${NO_COLOR}"
        exit 1
    fi
    remove_duplicates
    validate_conf_file
}

remove_duplicates() {
    local config_file="$ISHARE2_DIR/ishare2.conf"

    # Check if the configuration file exists
    if [ ! -f "$config_file" ]; then
        echo -e "${RED} [!] Configuration file does not exist.${NO_COLOR}"
        return
    fi

    # Remove duplicate lines from the configuration file
    awk '!seen[$0]++' "$config_file" >"$config_file.tmp" && mv "$config_file.tmp" "$config_file"

    echo -e "${GREEN} [+] Duplicates removed from the configuration file.${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
}

validate_conf_file() {
    local config_file="$ISHARE2_DIR/ishare2.conf"

    # Check if the configuration file exists
    if [ ! -f "$config_file" ]; then
        echo -e "${RED} [!] Configuration file does not exist.${NO_COLOR}"
        return 1
    fi

    # Array of allowed variables
    local allowed_vars=("USE_ARIA2C" "CHANNEL" "SSL_CHECK")

    # Read the configuration file line by line and filter out invalid variables
    local filtered_content=""
    while IFS= read -r line; do
        # Skip empty lines and comments
        if [[ -z "$line" || "$line" == \#* ]]; then
            continue
        fi

        # Extract variable name
        local var_name="${line%%=*}"

        # Check if the variable is allowed
        if [[ " ${allowed_vars[@]} " =~ " $var_name " ]]; then
            filtered_content+="$line"$'\n'
        else
            echo -e "${RED} [!] Removing invalid variable from the configuration file: $line.${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
        fi
    done <"$config_file"

    # Write the filtered content back to the configuration file
    echo "$filtered_content" >"$config_file"

    echo -e "${GREEN} [+] Configuration file validated and updated.${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
    source "$config_file"
    return 0
}

function install_aria2c() {
    # unlock apt
    unlock_dpkg
    # check if aria2c is installed otherwise install it
    if ! command -v aria2c &>/dev/null; then
        echo -e "${YELLOW} [+] aria2c is not installed.${NO_COLOR}"
        echo -e "${YELLOW} [+] Updating package lists...${NO_COLOR}"
        if ! apt-get update; then
            echo -e "${RED} [-] Failed to update package lists.${NO_COLOR}"
            exit 1
        fi

        echo -e "${YELLOW} [+] Installing aria2c...${NO_COLOR}"
        if ! apt-get install -y aria2; then
            echo -e "${RED} [-] Failed to install aria2c.${NO_COLOR}"
            exit 1
        fi
        echo -e "${YELLOW} [+] Installing unrar...${NO_COLOR}"
        if ! apt-get install -y unrar; then
            echo -e "${RED} [-] Failed to install unrar.${NO_COLOR}"
            exit 1
        fi
        echo -e "${GREEN} [+] Done.${NO_COLOR}"
    else
        echo -e "${GREEN} [+] aria2c already is installed.${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
        echo -e "${YELLOW} [+] Updating aria2c...${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
        if ! apt-get install --only-upgrade aria2; then
            echo -e "${RED} [-] Failed to update aria2c.${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
            exit 1
        fi
    fi
}

function unlock_dpkg() {
    # Check if apt is running
    if pgrep apt >/dev/null 2>&1; then
        echo "apt is currently running. Would you like to attempt unlocking dpkg? (y/n)"
        read -r answer

        if [[ $answer == "y" || $answer == "Y" ]]; then
            echo "Trying to kill the apt process..."

            # Attempt to kill apt process
            killall -r '^(apt|dpkg)$' >/dev/null 2>&1

            # Wait for the process to terminate
            sleep 5

            # Check if apt process is still running
            if pgrep apt >/dev/null 2>&1; then
                echo "Killing apt process failed. Exiting..."
                exit 1
            fi
        else
            echo "Skipping dpkg unlocking. Exiting..."
            exit 0
        fi
    fi

    # Remove lock files
    sudo rm /var/lib/dpkg/lock >/dev/null 2>&1
    sudo rm /var/cache/apt/archives/lock >/dev/null 2>&1
    # Remove lock files for apt frontend
    sudo rm /var/lib/dpkg/lock-frontend >/dev/null 2>&1
    sudo rm /var/cache/apt/archives/lock >/dev/null 2>&1
}

function create_ishare2_dir() {
    echo -e "${YELLOW} [+] Creating ishare2 directory...${NO_COLOR}"
    for dir in $ISHARE2_DIR $ISHARE2_DIR/tmp; do
        if ! mkdir -p "$dir" 2>/dev/null; then
            error_message=$(mkdir -p "$dir" 2>&1 >/dev/null)
            if [[ $error_message == *"Permission denied"* ]]; then
                echo -e "${RED} [-] Failed to create $dir: Permission denied.${NO_COLOR}"
            else
                echo -e "${RED} [-] Failed to create $dir. Error: $error_message${NO_COLOR}"
            fi
            exit 1
        fi
    done
    echo -e "${GREEN} [+] Done.${NO_COLOR}"
}

function fetch_json() {
    # Download the JSON and store it in a temporary file
    curl -sL "$JSON_URL" >"$TEMP_JSON"
}

download_file() {
    local url="$1"
    local output="$2"
    local options="$3"
    USE_ARIA2C=$(grep "USE_ARIA2C" $ISHARE2_DIR/ishare2.conf | cut -d "=" -f2)

    if [[ $USE_ARIA2C == "true" ]]; then
        # Check if aria2c is installed
        if ! command -v aria2c &>/dev/null; then
            echo -e "${RED} [-] Error: aria2c is not installed. Attempting to install it...${NO_COLOR}"
            install_aria2c >/dev/null
            # Check if aria2c is installed
            if ! command -v aria2c &>/dev/null; then
                echo -e "${RED} [-] Error: aria2c is not installed. Please install it manually and try again.${NO_COLOR}"
                exit 1
            else # aria2c is installed
                echo -e "${GREEN} [+] aria2c has been installed successfully.${NO_COLOR}"
            fi
        fi
    fi

    if command -v aria2c &>/dev/null && [[ $USE_ARIA2C == "true" ]]; then
        download_file_aria2 "$url" "$output" "$options"
    else
        download_file_wget "$url" "$output" "$options"
    fi
}

download_file_aria2() {
    local url="$1"
    local output_dir="$2"
    local output_name="$3"

    echo -e "${YELLOW} [+] Downloading file from $url... ${NO_COLOR}"
    rm -f error.log
    if [ "$SSL_CHECK" = true ]; then
        aria2c --console-log-level=warn -j 2 -c --split=4 --min-split-size=20M --max-connection-per-server=4 --download-result=hide --allow-overwrite=true --dir="$output_dir" --out="$output_name" --log="error.log" "$url"
    else
        aria2c --console-log-level=warn -j 2 -c --split=4 --min-split-size=20M --max-connection-per-server=4 --download-result=hide --check-certificate=false --allow-overwrite=true --dir="$output_dir" --out="$output_name" --log="error.log" "$url"
    fi

    if [ $? -eq 0 ]; then
        echo -e "${GREEN} [+] The file has been downloaded successfully to $output_dir$output_name ${NO_COLOR}"
        rm -f error.log
    else
        echo -e "${RED} [-] Error: Unable to download the file. Check the error.log file for more information.${NO_COLOR}"
        exit 1
    fi
}

download_file_curl() { # $1 = url, $2 = output
    # Create the directory if it does not exist
    mkdir -p $ISHARE2_DIR/tmp
    # Create the file if it does not exist
    touch $ISHARE2_DIR/tmp/curl_error
    local url="$1"
    local output="$2"
    echo -e "${YELLOW} [+] Downloading file from $url... ${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
    if [ "$SSL_CHECK" = true ]; then
        curl -s -o "$output" "$url" 2>$ISHARE2_DIR/tmp/curl_error
    else
        curl -s --insecure -o "$output" "$url" 2>$ISHARE2_DIR/tmp/curl_error
    fi

    if [ $? -eq 0 ]; then
        echo -e "${GREEN} [+] The file has been downloaded successfully to $output. ${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
        rm -f $ISHARE2_DIR/tmp/curl_error
    else
        echo -e "${RED} [-] Error: Unable to download the file. ${NO_COLOR}"
        # Read the error message from the curl_error file
        ERROR_MESSAGE=$(cat $ISHARE2_DIR/tmp/curl_error)
        # Print the error message
        echo -e "${RED} [-] Logs:\n $ERROR_MESSAGE ${NO_COLOR}"
        exit 1
    fi
}

download_file_wget() {
    # Create the directory if it does not exist
    mkdir -p $ISHARE2_DIR/tmp
    # Create the file if it does not exist
    touch $ISHARE2_DIR/tmp/wget_error
    local url="$1"
    local output_dir="$2"
    local output_name="$3"
    if [[ -z "$output_name" ]]; then
        # if output name is not provided, use the basename of the URL
        output_name=$(basename "$url")
    fi
    local output="$output_dir/$output_name"
    echo -e "${YELLOW} [+] Downloading file from $url... ${NO_COLOR}" >>$ISHARE2_DIR/logs.txt

    if [ "$SSL_CHECK" = true ]; then
        wget -O "$output" "$url" -q --show-progress --content-disposition
    else
        wget -O "$output" "$url" -q --show-progress --content-disposition --no-check-certificate
    fi

    # Check if wget command failed
    if [ $? -eq 0 ]; then
        echo -e "${GREEN} [+] The file has been downloaded successfully to $output. ${NO_COLOR}" >>$ISHARE2_DIR/logs.txt
        rm -f $ISHARE2_DIR/tmp/wget_error
    else
        echo -e "${RED} [-] Error: Unable to download the file. ${NO_COLOR}"
        # Read the error message from the wget_error file
        ERROR_MESSAGE=$(cat $ISHARE2_DIR/tmp/wget_error)
        # Print the error message
        echo -e "${RED} [-] Read the logs above for more information. ${NO_COLOR}"
        exit 1
    fi
}

function check_user_is_root() {
    if ! [[ "$(id -u)" == 0 ]]; then
        user=$(whoami)
        echo -e "${RED} [!] This script requires root privileges to be executed. The current user, \"$user\", does not have enough permissions. Please, switch to the root user to run the script.${NO_COLOR}"
        exit 1
    fi
}

function get_server_platform() {
    grep -q vmx /proc/cpuinfo && echo -n vmx >/opt/unetlab/platform
    grep -q svm /proc/cpuinfo && echo -n svm >/opt/unetlab/platform

    platform=$(cat /opt/unetlab/platform)

    if [[ $platform == "vmx" ]]; then YML_DIR="/opt/unetlab/html/templates/intel/"; fi
    if [[ $platform == "svm" ]]; then YML_DIR="/opt/unetlab/html/templates/amd/"; fi
}

function set_yml_template_folder_location() {
    data=$(mysql -uroot -ppnetlab -D pnetlab_db -e "SELECT control_value FROM control WHERE control_value>1;" 2>/dev/null)
    data_array=("$data")
    pnetlab_version=${data_array[1]}

    if [[ $pnetlab_version == "4.2.10" ]] || [[ $pnetlab_version == "5.0.1" ]]; then
        YML_DIR="/opt/unetlab/html/templates/"
    fi

    if [[ $pnetlab_version == *5.2* ]] || [[ $pnetlab_version == *5.3* ]] || [[ $pnetlab_version == *6.* ]]; then
        get_server_platform
    fi
}

function mylabs_get_lab_list_just_for_only_readable_labs() {
    LABS_DIR=$1

    # Added some correction when "/" is not found at the end of the provided path (LABS_DIR)
    if ! [[ ${LABS_DIR: -1} == "/" ]]; then LABS_DIR=$LABS_DIR/; fi

    if ! [[ -d $LABS_DIR ]]; then
        echo "Folder $LABS_DIR has not been found"
        echo "Check your full path to the labs"
        exit 0
    fi

    if [[ -z "$(ls -A "$LABS_DIR")" ]]; then
        echo "No labs found at $LABS_DIR folder in server"
        exit 0
    fi

    counter_all_labs_installed_on_server=0
    for file in "$LABS_DIR"*; do
        if [[ -d $file ]]; then continue; fi # Avoiding folders
        counter_all_lab
        s_installed_on_server=$((counter_all_labs_installed_on_server + 1))
    done

    echo -e "Labs inside $LABS_DIR folder in VM: $counter_all_labs_installed_on_server"

    declare -a readableLabsArray=()
    declare -a authorLabsArray=()

    for file in "$LABS_DIR"*; do
        if [[ -d $file ]]; then continue; fi # Avoiding folders
        check=$(grep -Pio 'encoding="UTF-8"' "$file")
        SUB="encoding"
        if [[ $check == *"$SUB"* ]]; then
            readableLabsArray+=("$file")
            # Get Author name list
            author_lab_name=$(grep -Pio '.*author="\K[^"]*' "$file" | sort -u)
            if [[ -z $author_lab_name ]]; then # Author name not specified
                author_lab_name=N/A
            fi
            authorLabsArray+=("$author_lab_name")
        fi
    done

    echo "Labs in plain text: ${#readableLabsArray[@]}"

    if [[ ${#readableLabsArray[@]} -eq 0 ]]; then
        STR="No readable labs have been found so there is no way to continue with this command"
        echo -e "${RED} [-]$STR\033[0m"
        exit 0
    fi

    echo -e "\nList\n"

    counter_for_readable_labs=0

    for f in "${readableLabsArray[@]}"; do
        counter_for_readable_labs=$((counter_for_readable_labs + 1))
        echo -e "$counter_for_readable_labs) ${f##*/} - ${authorLabsArray[$((counter_for_readable_labs - 1))]}"
    done

    STR1="ishare2 mylabs <path> <number>"
    STR2="ishare2 mylabs <path> all"
    echo -e "\nTo install images for a specific lab, use the following command:\n\033[32m$STR1\033[0m"
    echo -e "\nTo install images for all of the labs, use the following command:\n\033[32m$STR2\033[0m"
}

function mylabs_install_lab_images_just_for_only_readable_labs() {
    LABS_DIR=$1
    NUMBER=$2

    # Added some correction when "/" is not found at the end of the provided path (LABS_DIR)
    if ! [[ ${LABS_DIR: -1} == "/" ]]; then LABS_DIR=$LABS_DIR/; fi

    if ! [[ -d $LABS_DIR ]]; then
        echo "Folder $LABS_DIR has not been found"
        echo "Check your full path to the labs"
        exit 0
    fi

    if [[ -z "$(ls -A "$LABS_DIR")" ]]; then
        echo "No labs found at $LABS_DIR folder in server"
        exit 0
    fi

    declare -a readableLabsArray=()
    for file in "$LABS_DIR"*; do
        if [[ -d $file ]]; then continue; fi # Avoiding folders
        check=$(grep -Pio 'encoding="UTF-8"' "$file")
        SUB="encoding"
        if [[ $check == *"$SUB"* ]]; then
            readableLabsArray+=("$file")
        fi
    done

    counter_for_readable_labs=0
    for f in "${readableLabsArray[@]}"; do
        counter_for_readable_labs=$((counter_for_readable_labs + 1))
    done

    if [[ ${#readableLabsArray[@]} -eq 0 ]]; then
        STR="No readable labs have been found so there is no way to continue with this command"
        echo -e "${RED} [-]$STR\033[0m"
        exit 0
    fi

    if [[ $NUMBER -gt $counter_for_readable_labs || $NUMBER -le 0 ]]; then
        if [[ $counter_for_readable_labs -eq 1 ]]; then
            STR="Last parameter must be 1 because you have only one lab"
            echo -e "${YELLOW}$STR${NO_COLOR}"
        else
            STR="Last parameter must be a number between 1 and $counter_for_readable_labs"
            echo -e "${YELLOW}$STR${NO_COLOR}"
        fi

        echo -e
        mylabs_get_lab_list_just_for_only_readable_labs $1
        exit 0
    fi

    file=${readableLabsArray[$((NUMBER - 1))]}
    echo -e "File selected: $file"

    #echo -e "\nIOL images"
    iol_images=$(grep -Pio 'type="iol".*image="\K[^"]*' "$file" | sort -u)
    #echo "$iol_images"
    echo "$iol_images" >/opt/unetlab/labs/iol_images.txt

    #echo -e "\nDynamips images"
    dynamips_images=$(grep -Pio 'type="dynamips".*image="\K[^"]*' "$file" | sort -u)
    #echo "$dynamips_images"
    echo "$dynamips_images" >/opt/unetlab/labs/dynamips_images.txt

    #echo -e "\nQemu images"
    qemu_images=$(grep -Pio 'type="qemu".*image="\K[^"]*' "$file" | sort -u)
    #echo "$qemu_images"
    echo "$qemu_images" >/opt/unetlab/labs/qemu_images.txt

    #echo -e "\nDocker images"
    docker_images=$(grep -Pio 'type="docker".*image="\K[^"]*' "$file" | sort -u)
    echo "$docker_images" >/opt/unetlab/labs/docker_images.txt

    list_iol_images=/opt/unetlab/labs/iol_images.txt
    list_dynamips_images=/opt/unetlab/labs/dynamips_images.txt
    list_qemu_images=/opt/unetlab/labs/qemu_images.txt
    list_docker_images=/opt/unetlab/labs/docker_images.txt

    BIN_FLAG=0
    if ! grep -q '[^[:space:]]' $list_iol_images; then BIN_FLAG=1; fi

    DYNAMIPS_FLAG=0
    if ! grep -q '[^[:space:]]' $list_dynamips_images; then DYNAMIPS_FLAG=1; fi

    QEMU_FLAG=0
    if ! grep -q '[^[:space:]]' $list_qemu_images; then QEMU_FLAG=1; fi

    DOCKER_FLAG=0
    if ! grep -q '[^[:space:]]' $list_docker_images; then DOCKER_FLAG=1; fi

    echo -e "\nImages found on lab\n"

    echo -e "${GREEN}--- bin images ---${NO_COLOR}"
    if [[ BIN_FLAG -eq 1 ]]; then
        echo No bin images found
    else
        n=1
        while read -r line; do
            echo "File $n : $line"
            n=$((n + 1))
        done <$list_iol_images
    fi

    echo -e "\n${GREEN}--- dynamips images ---${NO_COLOR}"
    if [[ DYNAMIPS_FLAG -eq 1 ]]; then
        echo No dynamips images found
    else
        n=1
        while read -r line; do
            echo "File $n : $line"
            n=$((n + 1))
        done <$list_dynamips_images
    fi

    echo -e "\n${GREEN}--- qemu images ---${NO_COLOR}"
    if [[ QEMU_FLAG -eq 1 ]]; then
        echo No qemu images found
    else
        n=1
        while read -r line; do
            echo "File $n : $line"
            n=$((n + 1))
        done <$list_qemu_images
    fi

    echo -e "\n${GREEN}--- docker images ---${NO_COLOR}"
    if [[ DOCKER_FLAG -eq 1 ]]; then
        echo No docker images found
    else
        n=1
        while read -r line; do
            echo "File $n : $line"
            n=$((n + 1))
        done <$list_docker_images
    fi

    STR_BIN="\nDownload BIN images for this lab"
    echo -e "\033[32m$STR_BIN\033[0m"
    if [[ BIN_FLAG -eq 1 ]]; then
        echo -
    else
        download_lab_iol_images "$file"
    fi

    STR_DYNAMIPS="\nDownload DYNAMIPS images for this lab"
    echo -e "\033[32m$STR_DYNAMIPS\033[0m"
    if [[ DYNAMIPS_FLAG -eq 1 ]]; then
        echo -
    else
        download_lab_dynamips_images
    fi

    STR_QEMU="\nDownload QEMU images for this lab"
    echo -e "\033[32m$STR_QEMU\033[0m"
    if [[ QEMU_FLAG -eq 1 ]]; then
        echo -
    else
        download_lab_qemu_images
    fi

    STR_DOCKER="\nDownload DOCKER images for this lab"
    echo -e "\033[32m$STR_DOCKER\033[0m"
    if [[ DOCKER_FLAG -eq 1 ]]; then
        echo -
    else
        download_lab_docker_images
    fi

    # Remove csv file
    rm "$(pwd)"/"$FILENAME" >/dev/null 2>&1

    # Remove files
    rm /opt/unetlab/labs/iol_images.txt
    rm /opt/unetlab/labs/dynamips_images.txt
    rm /opt/unetlab/labs/qemu_images.txt
    rm /opt/unetlab/labs/docker_images.txt
}

function mylabs_install_lab_images_just_for_only_readable_labs_ALL() {
    LABS_DIR=$1

    # Added some correction when "/" is not found at the end of the provided path (LABS_DIR)
    if ! [[ ${LABS_DIR: -1} == "/" ]]; then LABS_DIR=$LABS_DIR/; fi

    if ! [[ -d $LABS_DIR ]]; then
        echo "Folder $LABS_DIR has not been found"
        echo "Check your full path to the labs"
        exit 0
    fi

    if [[ -z "$(ls -A "$LABS_DIR")" ]]; then
        echo "No labs found at $LABS_DIR in server"
        exit 0
    fi

    declare -a readableLabsArray=()
    for file in "$LABS_DIR"*; do
        if [[ -d $file ]]; then continue; fi # Avoiding folders
        check=$(grep -Pio 'encoding="UTF-8"' "$file")
        SUB="encoding"
        if [[ $check == *"$SUB"* ]]; then
            readableLabsArray+=("$file")
        fi
    done

    N=${#readableLabsArray[@]}

    if [[ $N -eq 0 ]]; then
        STR="No readable labs have been found so there is no way to continue with this command"
        echo -e "${RED} [-]$STR\033[0m"
        exit 0
    fi

    if [[ $N -eq 1 ]]; then
        echo "Starting to download images for $N lab"
    else
        echo "Starting to download images for $N labs"
    fi

    for ((i = 1; i <= N; i++)); do
        echo -e "\n\033[32mLab $i/$N\033[0m"
        ishare2 mylabs $LABS_DIR "$i"
    done

    echo -e "\nDone"
}

function get_lab_list_just_for_only_readable_labs() {
    LABS_DIR=/opt/unetlab/labs/"Your labs from PNETLab Store/"

    if ! [[ -d $LABS_DIR ]]; then
        echo "Folder Your labs from PNETLab Store has not been found"
        echo "This folder is created when a lab from PNETLab Store is downloaded"
        exit 0
    fi

    if [[ -z "$(ls -A "$LABS_DIR")" ]]; then
        echo "No labs found at PNETLab Store folder in server"
        exit 0
    fi

    counter_all_labs_installed_on_server=0
    for file in "$LABS_DIR"*; do
        counter_all_labs_installed_on_server=$((counter_all_labs_installed_on_server + 1))
    done

    echo -e "Labs inside PNETLab Store folder in VM: $counter_all_labs_installed_on_server"

    declare -a readableLabsArray=()
    declare -a authorLabsArray=()

    for file in "$LABS_DIR"*; do
        check=$(grep -Pio 'encoding="UTF-8"' "$file")
        SUB="encoding"
        if [[ $check == *"$SUB"* ]]; then
            readableLabsArray+=("$file")
            author_lab_name=$(grep -Pio '.*author="\K[^"]*' "$file" | sort -u)
            if [[ -z $author_lab_name ]]; then # Author name not specified
                author_lab_name=N/A
            fi
            authorLabsArray+=("$author_lab_name")
        fi
    done

    echo "Labs in plain text: ${#readableLabsArray[@]}"

    if [[ ${#readableLabsArray[@]} -eq 0 ]]; then
        STR="No readable labs were found so we cannot download images for any lab"
        echo -e "${RED} [-]$STR\033[0m"
        exit 0
    fi

    echo -e "\nList\n"

    counter_for_readable_labs=0

    for f in "${readableLabsArray[@]}"; do
        counter_for_readable_labs=$((counter_for_readable_labs + 1))
        echo -e "$counter_for_readable_labs) ${f##*/} - ${authorLabsArray[$((counter_for_readable_labs - 1))]}"
    done

    echo -e "\nTo install images for a specific lab, use the following command:\n\033[32mishare2 labs <number>\033[0m"
    echo -e "\nTo install images for all of the labs, use the following command:\n\033[32mishare2 labs all\033[0m"
}

function install_lab_images_just_for_only_readable_labs() {
    NUMBER=$1
    LABS_DIR="/opt/unetlab/labs/Your labs from PNETLab Store/"

    if ! [[ -d $LABS_DIR ]]; then
        echo "\"Your labs from PNETLab Store\" directory has not been found"
        echo "This folder is automatically created when a lab from PNETLab Store is downloaded"
        exit 0
    fi

    if [[ -z "$(ls -A "$LABS_DIR")" ]]; then
        echo "No labs were found at PNETLab Store folder in server"
        exit 0
    fi

    declare -a readableLabsArray=()
    for file in "$LABS_DIR"*; do
        check=$(grep -Pio 'encoding="UTF-8"' "$file")
        SUB="encoding"
        if [[ $check == *"$SUB"* ]]; then
            readableLabsArray+=("$file")
        fi
    done

    counter_for_readable_labs=0
    for f in "${readableLabsArray[@]}"; do
        counter_for_readable_labs=$((counter_for_readable_labs + 1))
    done

    if [[ ${#readableLabsArray[@]} -eq 0 ]]; then
        STR="No readable labs were found so we cannot download images for any lab"
        echo -e "${RED} [-]$STR\033[0m"
        exit 0
    fi

    if [[ $NUMBER -gt $counter_for_readable_labs || $NUMBER -le 0 ]]; then
        if [[ $counter_for_readable_labs -eq 1 ]]; then
            STR="Last parameter must be 1 because you have only one lab"
            echo -e "${YELLOW}$STR${NO_COLOR}"
        else
            STR="Last parameter must be a number between 1 and $counter_for_readable_labs"
            echo -e "${YELLOW}$STR${NO_COLOR}"
        fi

        echo -e
        get_lab_list_just_for_only_readable_labs
        exit 0
    fi

    file=${readableLabsArray[$((NUMBER - 1))]}
    echo -e "File selected: $file"
    TYPES=(iol dynamips qemu docker)
    for type in "${TYPES[@]}"; do
        images=$(grep -Pio "type=\"$type\".*image=\"\K[^\"]*" "$file" | sort -u)
        echo "$images" >/opt/unetlab/labs/"$type"_images.txt
    done

    list_iol_images=/opt/unetlab/labs/iol_images.txt
    list_dynamips_images=/opt/unetlab/labs/dynamips_images.txt
    list_qemu_images=/opt/unetlab/labs/qemu_images.txt
    list_docker_images=/opt/unetlab/labs/docker_images.txt

    BIN_FLAG=0
    if ! grep -q '[^[:space:]]' $list_iol_images; then BIN_FLAG=1; fi

    DYNAMIPS_FLAG=0
    if ! grep -q '[^[:space:]]' $list_dynamips_images; then DYNAMIPS_FLAG=1; fi

    QEMU_FLAG=0
    if ! grep -q '[^[:space:]]' $list_qemu_images; then QEMU_FLAG=1; fi

    DOCKER_FLAG=0
    if ! grep -q '[^[:space:]]' $list_docker_images; then DOCKER_FLAG=1; fi

    print_separator "List of images found on lab"
    for type in "${TYPES[@]}"; do
        print_separator "List of ${type^^} images"
        list_file="/opt/unetlab/labs/${type}_images.txt"
        if ! grep -qv -e '^\s*$' "$list_file"; then
            echo "No ${type} images found"
        else
            n=1
            while read -r line; do
                echo "File $n : $line"
                n=$((n + 1))
            done <"$list_file"
        fi
    done

    TYPES=(iol dynamips qemu)
    for type in "${TYPES[@]}"; do
        print_separator "Start downloading ${type^^} images for this lab"
        pull_lab_images "$file" "$type"
    done

    print_separator "Start downloading DOCKER images for this lab"
    echo -e "\033[32m$STR_DOCKER\033[0m"
    if [[ DOCKER_FLAG -eq 1 ]]; then
        echo -e "${YELLOW}- Nothing to download${NO_COLOR}"
    else
        echo "Docker images"
        download_lab_docker_images
    fi

    # Remove csv file
    rm "$(pwd)"/"$FILENAME" >/dev/null 2>&1

    # Remove files
    rm /opt/unetlab/labs/iol_images.txt
    rm /opt/unetlab/labs/dynamips_images.txt
    rm /opt/unetlab/labs/qemu_images.txt
    rm /opt/unetlab/labs/docker_images.txt
}

function install_lab_images_just_for_only_readable_labs_ALL() {
    LABS_DIR=/opt/unetlab/labs/"Your labs from PNETLab Store/"

    if ! [[ -d $LABS_DIR ]]; then
        echo "Folder Your labs from PNETLab Store has not been found"
        echo "This folder is created when a lab from PNETLab Store is downloaded"
        exit 0
    fi

    if [[ -z "$(ls -A "$LABS_DIR")" ]]; then
        echo "No labs found at PNETLab Store folder in server"
        exit 0
    fi

    declare -a readableLabsArray=()
    for file in "$LABS_DIR"*; do
        check=$(grep -Pio 'encoding="UTF-8"' "$file")
        SUB="encoding"
        if [[ $check == *"$SUB"* ]]; then
            readableLabsArray+=("$file")
        fi
    done

    N=${#readableLabsArray[@]}

    if [[ $N -eq 0 ]]; then
        STR="No readable labs have been found so there is no way to continue with this command"
        echo -e "${RED} [-]$STR\033[0m"
        exit 0
    fi

    if [[ $N -eq 1 ]]; then
        echo "Starting to download images for $N lab"
    else
        echo "Starting to download images for $N labs"
    fi

    for ((i = 1; i <= N; i++)); do
        echo -e "\n\033[32mLab $i/$N\033[0m"
        ishare2 labs "$i"
    done
    echo -e "\nDone"
}

function corrections_for_bin_images_in_lab_function() {
    BIN_NAME=$1
    LAB_PATH=$2

    if [[ $BIN_NAME = "i86_Linux-L2-Adventerpisek9-mx.SSA.high_iron_20190423.bin" ]]; then
        OLD_FILENAME="i86_Linux-L2-Adventerpisek9-mx.SSA.high_iron_20190423.bin"
        NEW_FILENAME="i86bi_linux_l2-adventerprisek9-ms.SSA.high_iron_20190423.bin"
        # Bad spelling: 4 errors
        # 1) i86 should be i86bi (bi is missing)
        # 2) Adventerpisek9 should be Adventerprisek9 (r letter is missing)
        # 3) i86_Linux should be i86bi_linux_l2 (L in Linux should be in lowercase, "bi" missing case and change template)
        # 4) -mx should be -ms (not mx but ms)

        BIN_NAME=$NEW_FILENAME
        echo -e "\nImage filename changed from:\n$OLD_FILENAME"
        echo -e "to\n$NEW_FILENAME\n"

        echo "Changing the filename image inside .unl lab file"
        sed -i -e 's/'$OLD_FILENAME'/'$NEW_FILENAME'/g' "$LAB_PATH"
        echo -e "Changing: OK\n"
    fi

    if [[ $BIN_NAME = "L3-ADVENTERPRISEK9-M-15.4-2T.bin" ]]; then
        OLD_FILENAME="L3-ADVENTERPRISEK9-M-15.4-2T.bin"
        NEW_FILENAME="i86bi_linux_l3-L3-ADVENTERPRISEK9-M-15.4-2T.bin"
        # Bad spelling: 1 error
        # 1) L3 is not a yml valid template (There is not a L3.yml available)
        # So, filename must be i86bi_linux_l3 (for i86bi_linux_l3.yml)

        # BIN_NAME="L3-ADVENTERPRISEK9-M-15.4-2T.bin" # This is the old filename to download it in this case
        # echo -e "\nImage filename changed from:\n$OLD_FILENAME"
        # echo -e "to\n$NEW_FILENAME\n"

        echo "Changing the filename image inside .unl lab file"
        sed -i -e 's/'$OLD_FILENAME'/'$NEW_FILENAME'/g' "$LAB_PATH"
        echo -e "Changing: OK"
    fi
}

function pull_lab_images() {
    # Pending to implement: corrections_for_bin_images_in_lab_function "$IMAGE_NAME" "$LAB_PATH"
    # Pending to implement: corrections_for_qemu_images_in_lab_function "$QEMU_NAME"
    LAB_PATH="$1"
    IMAGE_TYPE="$2"
    IMAGE_TYPE_UPPERCASE=$(echo "$IMAGE_TYPE" | tr '[:lower:]' '[:upper:]')

    filename1="/opt/unetlab/labs/${IMAGE_TYPE}_images.txt"
    n=1
    while read -r line; do
        n=$((n + 1))
        IMAGE_NAME="$line"
        if [[ -z $IMAGE_NAME ]]; then
            echo "No $IMAGE_TYPE images found"
        else
            fetch_json
            # Clear the ID variable at the start of each iteration
            ID=""
            # Search for the image in the "IMAGE_TYPE" section of the JSON file and get the ID
            ID=$(jq -r --arg image_name "$IMAGE_NAME" '.["'"$IMAGE_TYPE_UPPERCASE"'"][] | select(.name == $image_name) | .id' "$TEMP_JSON")

            if [ -n "$ID" ]; then
                # The image was found in the "IMAGE_TYPE" section of the JSON data
                echo "Image '$IMAGE_NAME' found in JSON data. ID: $ID"
                # Download the image
                ishare2 pull "$IMAGE_TYPE" "$ID"
            else
                echo "Image '$IMAGE_NAME' not found in JSON data."
            fi
        fi
    done <"$filename1"

    rm "$TEMP_JSON" >/dev/null 2>&1
}

function check_docker_service_status() {
    if service docker status | grep -q "active (running)"; then
        return 0 # 0 means "no failures"
    fi

    if service docker status | grep -q "inactive (dead)"; then
        echo -e "${RED}Detected: Docker service is down. Trying to restart it${NO_COLOR}"
        service docker restart
    fi

    if service docker status | grep -q "active (running)"; then
        echo -e "${GREEN}Docker service has been restarted successfully${NO_COLOR}"
        return 0 # 0 means "no failures"
    else
        echo -e "${RED}There was a problem trying to start docker service${NO_COLOR}"
        echo -e "Information about service docker status command:\n"
        service docker status
        #return 1 # 1 means failure
    fi
}

function list_dockers() {
    echo -e "\nDocker images in server"
    docker images
}

function count_dockers() {
    data=$(docker images | wc -l)
    docker_count=$((data - 1))

    if [[ $docker_count -eq 1 ]]; then
        echo -e "\n$docker_count docker image found in server"
    else
        echo -e "\n$docker_count docker images found in server"
    fi
}

function corrections_for_docker_images_in_lab_function() {
    DOCKER_NAME=$1
    LAB_PATH=$2

    declare -a array=(
        "eve-ostinato"
        "eve-ostinato-bionic"
        "eve-ostinato-focal"
        "eve-dind"
        "eve-dind-focal"
        "eve-chrome"
        "eve-chrome-bionic"
        "eve-chrome-focal"
        "eve-firefox"
        "eve-firefox-bionic"
        "eve-firefox-focal"
        "eve-desktop"
        "eve-desktop-bionic"
        "eve-desktop-focal"
        "eve-gui-server"
        "eve-gui-server-bionic"
        "eve-gui-server-focal"
        "eve-wireshark"
        "eve-wireshark-bionic"
        "eve-wireshark-focal"
        "eve-kali"
        "eve-kali-large"
        "eve-napalm-focal"
        "eve-ansible-focal"
        "dockergui-rdp"
        "eve-gui-server:latest"
        "eve-gui-server-bionic:latest"
    )

    for i in "${array[@]}"; do
        if [[ $DOCKER_NAME == "$i" ]]; then
            OLD_FILENAME=$DOCKER_NAME
            NEW_FILENAME=eveng/$DOCKER_NAME

            DOCKER_NAME=$NEW_FILENAME
            echo -e "\nDocker image name changed from:\n$OLD_FILENAME"
            echo -e "to\n$NEW_FILENAME\n"

            echo "Changing docker image name inside .unl lab file"
            echo Lab file: "$LAB_PATH"
            sed -i -e s+$OLD_FILENAME+$NEW_FILENAME+g "$LAB_PATH"
            echo -e "Changing: OK\n"
        fi
    done
}

function download_lab_docker_images() {
    filename1=/opt/unetlab/labs/docker_images.txt

    # Checking docker service status before pull any docker image
    if check_docker_service_status $1; then # When 0 is returned
        while read -r line; do
            DOCKER_NAME=$line

            corrections_for_docker_images_in_lab_function $DOCKER_NAME "$LAB_PATH"

            STR="Docker requested: "
            echo -e "\033[33m$STR\033[0m $DOCKER_NAME"

            docker pull "$DOCKER_NAME"
        done <$filename1
    fi

    list_dockers
    count_dockers
}

function check_ishare2_version_file_exists() {
    # Check if file is empty or not exists or different from installed $VERSION
    if [[ ! -s $ISHARE2_DIR/ishare2_version ]] || [[ $(cat $ISHARE2_DIR/ishare2_version) != "$VERSION" ]]; then
        echo $VERSION >$ISHARE2_DIR/ishare2_version
    fi
}

function upgrade_ishare2() {
    LOCAL_VALUE=$(cat $ISHARE2_DIR/ishare2_version)
    REMOTE_VALUE=$(curl -s --insecure $URL_VERSION)

    if [[ $LOCAL_VALUE == "$REMOTE_VALUE" ]]; then
        echo -e "${YELLOW} [+] ishare2 $REMOTE_VALUE is already in the newest version available. ${NO_COLOR}"
        echo -e "${YELLOW} [+] Reinstalling latest version of ishare2${NO_COLOR}"
    fi

    rm /usr/sbin/ishare2
    rm -rf /opt/ishare2/cli/
    download_file_wget $URL_ISHARE2 /usr/sbin/ "ishare2"

    echo -e "${GREEN} [+] Successfully downloaded the latest version of ishare2!${NO_COLOR}"
    # Make ishare2 executable
    echo -e "${YELLOW} [+] Setting ishare2 permissions${NO_COLOR}"
    chmod +x /usr/sbin/ishare2
    # Show success message
    echo -e "${GREEN} [+] ishare2 was upgraded from $LOCAL_VALUE to $REMOTE_VALUE ${NO_COLOR}"
}

function menu_ishare2_upgrade_pnetlab() {
    # Define the menu options
    options=(
        "Upgrade PNETLab v5"
        "Upgrade PNETLab v5 Beta"
        "Upgrade PNETLab v6"
    )

    # Set the prompt for the select menu
    PS3="Please, select an option: "

    # Print the menu and wait for user input
    select opt in "${options[@]}" "Exit"; do
        case "$REPLY" in
        1)
            # Upgrade PNETLab v5
            bash -c "$(curl -sL --insecure "$URL_PNETLAB_V5")"
            ;;
        2)
            # Upgrade PNETLab v5 Beta
            bash -c "$(curl -sL --insecure "$URL_PNETLAB_V5_BETA")"
            ;;
        3)
            # Upgrade PNETLab v6
            bash -c "$(curl -sL --insecure "$URL_PNETLAB_V6")"
            ;;
        $((${#options[@]} + 1)))
            break
            ;;
        *)
            # Invalid option
            total_options=${#options[@]}
            echo -e "${RED}Invalid option: Select a number from 1 to $total_options${NO_COLOR}"
            continue
            ;;
        esac
    done
}

function menu_ishare2_upgrade() {
    prompt="Please, select an option: "
    options=(
        "Upgrade ishare2"
        "Upgrade PNETLab"
        "Upgrade ishare2 GUI"
    )

    PS3="$prompt"
    select opt in "${options[@]}" "Exit"; do
        case "$REPLY" in
        1)
            upgrade_ishare2
            break
            ;;
        2)
            menu_ishare2_upgrade_pnetlab
            break
            ;;
        3)
            ishare2 gui install
            break
            ;;
        $((${#options[@]} + 1)))
            break
            ;;
        *)
            STR="Invalid option: Select a number from 1 to 4"
            echo -e "${RED}$STR${NO_COLOR}"
            continue
            ;;
        esac
    done
}

function show_changelog() {
    FILE=/root/CHANGELOG.md
    if [[ -e $FILE ]]; then rm $FILE; fi

    wget -q "$URL_CHANGELOG_MD" -P /root
    head -n 15 $FILE
    rm $FILE
}

function ishare2_gui_install() {
    curl -sL "$URL_ISHARE2_GUI_INSTALL" | bash
}
function ishare2_gui_start() {
    systemctl start ishare2_gui.service
    if [[ $? -ne 0 ]]; then
        echo -e "${RED} [-] Error starting ishare2 GUI service. ${NO_COLOR}"
        echo -e "${RED} [-] Please see the logs for troubleshooting. Run: systemctl status ishare2_gui.service ${NO_COLOR}"
        exit 1
    fi
}

function ishare2_gui_stop() {
    systemctl stop ishare2_gui.service
    if [[ $? -ne 0 ]]; then
        echo -e "${RED} [-] Error stopping ishare2 GUI service. ${NO_COLOR}"
        echo -e "${RED} [-] Please see the logs for troubleshooting. Run: systemctl status ishare2_gui.service ${NO_COLOR}"
        exit 1
    fi
}

function ishare2_gui_restart() {
    systemctl restart ishare2_gui.service
    if [[ $? -ne 0 ]]; then
        echo -e "${RED} [-] Error restarting ishare2 GUI service. ${NO_COLOR}"
        echo -e "${RED} [-] Please see the logs for troubleshooting. Run: systemctl status ishare2_gui.service ${NO_COLOR}"
        exit 1
    fi
}

# Display the data for a specific type in a table
function display_images() {
    # Download the JSON and store it in a temporary file
    curl -sL "$JSON_URL" >temp.json
    print_separator "Available $TYPE images"

    # Filter rows with jq and keep the table headers
    data=$(jq -r '(["ID","NAME","SIZE"] | (., map(length*"-"))), (.["'$TYPE'"][] | select(.name | contains("'$FILTER'")) | [.id, .name, .size]) | @tsv' temp.json)

    # Check if there are matching data rows
    if [ -n "$data" ]; then
        echo -e "$data" | column -t -s $'\t'
        # Calculate and display the total count
        total_count=$(echo "$data" | wc -l)
        total_count=$((total_count - 2))
        if [[ $total_count -eq 0 ]]; then
            echo -e "\n${RED}No $TYPE images found${NO_COLOR}"
        elif [[ $total_count -eq 1 ]]; then
            echo -e "\n${GREEN}$total_count $TYPE image found${NO_COLOR}"
        else
            echo -e "\n${GREEN}$total_count $TYPE images found${NO_COLOR}"
        fi
    fi

    rm temp.json
}

function generate_a_new_license() {
    BIN_PATH="/opt/unetlab/addons/iol/bin/"

    PYTHON_FILE=$BIN_PATH"CiscoIOUKeygen.py"
    PERL_FILE=$BIN_PATH"keepalive.pl"

    if [[ -e $PYTHON_FILE ]]; then rm $PYTHON_FILE; fi

    wget -O $PYTHON_FILE $URL_CISCO_IOU_KEYGEN_PY -q
    if [[ $? -ne 0 ]]; then
        echo -e "${RED} [-] Error downloading CiscoIOUKeygen.py file. ${NO_COLOR}"
        echo -e "${RED} [-] Please check your internet connection and try again. ${NO_COLOR}"
        exit 1
    fi
    echo -e "${YELLOW} [!] Running CiscoIOUKeygen.py file... ${NO_COLOR}"
    python $PYTHON_FILE
    if [[ $? -ne 0 ]]; then
        echo -e "${RED} [-] Error running CiscoIOUKeygen.py file. ${NO_COLOR}"
        echo -e "${RED} [-] Please check your internet connection and try again. ${NO_COLOR}"
        exit 1
    fi

    if ! [[ -e $PERL_FILE ]]; then
        wget -O $PERL_FILE $URL_KEEPALIVE_PL -q
        if [[ $? -ne 0 ]]; then
            echo -e "${RED} [-] Error downloading keepalive.pl file. ${NO_COLOR}"
            echo -e "${RED} [-] Please check your internet connection and try again. ${NO_COLOR}"
            exit 1
        fi
    fi
    echo -e "${GREEN} [+] IOL license was generated successfully. ${NO_COLOR}"
}

function pull_all_iol_images() {
    FILENAME="$ISHARE2_DIR/BIN.csv"

    while IFS=',' read -r col1 _ _ _ _; do
        N=$col1
    done <$FILENAME
    N=$col1

    echo "Starting to download $N bin files"

    for ((i = 1; i <= N; i++)); do
        echo -e "\nFile $i/$N"
        ishare2 pull bin "$i"
    done

    echo -e "\nFinished"
}

function pull_all_dynamips_images() {
    FILENAME="$ISHARE2_DIR/DYNAMIPS.csv"
    while IFS=',' read -r col1 _ _ _ _; do
        N=$col1
    done <$FILENAME
    N=$col1

    echo "Starting to download $N dynamips files"

    for ((i = 1; i <= N; i++)); do
        echo -e "\nFile $i/$N"
        ishare2 pull dynamips "$i"
    done

    echo -e "\nFinished"
}

function show_help_info() {
    echo -e "1) For problems, use our Telegram Channel describing your problem and sending a screenshot and/or a video"
    echo -e "\n2) For new files to be uploaded, you can use our Telegram Channel too"
    echo -e "In this case, you can send or ask for new images to be uploaded"
    echo -e "\n3) Using \033[32mishare2 upgrade\033[0m will display a menu that allows users to upgrade ishare2 and PNETLab."
    echo -e "\n4) If CiscoIOUKeygen.py, iourc and/or keepalive.pl files in /opt/unetlab/addons/iol/bin/ are deleted, you can recover them by using \033[32mishare2 relicense\033[0m. This will not affect images in there."
    echo -e "Also, this command when used, will generate a new license file called iourc, needed for bin files"
    echo -e "\n5) Don't cancel a download. In case you do it, you will have to remove incomplete files or folders manually or use the --overwrite parameter."
    echo -e "\n6) The main difference between ${YELLOW}ishare2 labs${NO_COLOR} and ${YELLOW}ishare2 mylabs${NO_COLOR} is that, in the first case, the folder used is the one PNETLab creates when you download a lab from the store and in the second case you are able to select any folder you want in order to download labs"
    echo -e "\nTelegram Channel: https://t.me/NetLabHub"
}

function show_ishare2_usage() {
    # For ishare2
    ISHARE2_VERSION_USAGE=$(cat $ISHARE2_DIR/ishare2_version)

    STR=""
    LOCAL_VALUE=$ISHARE2_VERSION_USAGE
    REMOTE_VALUE=$(curl -s "$URL_VERSION")

    if ! [[ $LOCAL_VALUE == "$REMOTE_VALUE" ]]; then
        STR="New ishare2 version available: $REMOTE_VALUE"
    fi

    NEW_VERSION_RESULT=$(echo -e "${YELLOW}" "$STR" "${NO_COLOR}")

    # For PNETLab
    data=$(mysql -uroot -ppnetlab -D pnetlab_db -e "SELECT control_value FROM control WHERE control_value>1;" 2>/dev/null)
    pnetlab_info=($data)
    PNETLAB_VERSION_USAGE=${pnetlab_info[1]}

    # For ishare2 GUI
    # ISHARE2_GUI_VERSION_USAGE=$(cat $ISHARE2_DIR/ishare2_gui_version)

    # STR=""
    # LOCAL_VALUE=$ISHARE2_GUI_VERSION_USAGE
    # REMOTE_VALUE=$(curl -s $URL_ISHARE2_GUI_VERSION)

    # if ! [[ $LOCAL_VALUE == "$REMOTE_VALUE" ]]; then
    #     STR="New ishare2 GUI version available: $REMOTE_VALUE"
    # fi

    # NEW_VERSION_RESULT_FOR_ISHARE2_GUI=$(echo -e ${YELLOW} $STR ${NO_COLOR})

    # Message displayed when using ishare2 command
    echo "
Syntax

ishare2 [action] [param1] [param2] [--overwrite]

action:
    search      : Search for images by type
    pull        : Download an image by type and number
    installed   : Show installed images on server
    labs        : Show labs on server and download images for those labs
    mylabs      : Same as labs command but using a customized path to labs
    relicense   : Generate a new iourc license for bin images
    upgrade     : Retrieves a menu that allows users to upgrade ishare2 and PNETLab VM
    changelog   : Show the latest changes made to ishare2
    gui         : Web app to use ishare2 in browser
    test        : Test internet connectivity to required sites (Github, Google Sheets)
    help        : Show useful information

param1:
    type = all, bin, qemu, dynamips, docker or name

param2:
    number = This number can be obtained using ishare2 search <type>

--overwrite:
    Used to overwrite an existing image if it already exists on your system.

Examples:

- ishare2 search <type>
    - ishare2 search all
    - ishare2 search bin
    - ishare2 search qemu
    - ishare2 search dynamips
    - ishare2 search <name>
        Examples:
            - ishare2 search vios
            - ishare2 search win-
            - ishare2 search winserver
            - ishare2 search kali
            - ishare2 search mikro
            - ishare2 search forti
            - ishare2 search nxos
            - ishare2 search vmx
            - ishare2 search esxi
            - ishare2 search palo
            - ishare2 search Licensed
            - More <name> options using ishare2 search all

- ishare2 pull bin <number> [--overwrite]
- ishare2 pull qemu <number> [--overwrite]
- ishare2 pull dynamips <number> [--overwrite]

- ishare2 pull bin all
- ishare2 pull qemu all (Not available for qemu type due to its large size)
- ishare2 pull dynamips all

- ishare2 installed all
- ishare2 installed bin
- ishare2 installed qemu
- ishare2 installed dynamips
- ishare2 installed docker

- ishare2 labs
- ishare2 labs <number>
- ishare2 labs all

- ishare2 mylabs <path>
- ishare2 mylabs <path> <number>
- ishare2 mylabs <path> all

- ishare2 gui install
- ishare2 gui start
- ishare2 gui stop
- ishare2 gui restart

- ishare2 relicense
- ishare2 upgrade
- ishare2 changelog
- ishare2 test
- ishare2 config
- ishare2 help

ishare2: $ISHARE2_VERSION_USAGE$NEW_VERSION_RESULT
Channel: $CHANNEL
PNetLab: v$PNETLAB_VERSION_USAGE
ishare2 GUI: $ISHARE2_GUI_VERSION_USAGE$NEW_VERSION_RESULT_FOR_ISHARE2_GUI
"
}

function msg_available_options_for_ishare2_search() {
    echo -e "Available options\n"
    echo "- ishare2 search all"
    echo "- ishare2 search qemu"
    echo "- ishare2 search dynamips"
    echo "- ishare2 search bin"
    echo "- ishare2 search <name>"
    echo "  - ishare2 search vios"
    echo "  - ishare2 search win-"
    echo "  - ishare2 search winserver"
    echo "  - ishare2 search kali"
    echo "  - ishare2 search mikro"
    echo "  - ishare2 search forti"
    echo "  - ishare2 search nxos"
    echo "  - ishare2 search vmx"
    echo "  - ishare2 search esxi"
    echo "  - More <name> options using ishare2 search all"
}

function msg_incorrect_argument_or_no_arg_for_ishare2_pull() {
    echo -e "Syntax:\nishare2 pull <type> <number>\n"
    echo "type: bin, qemu or dynamips"
    echo -e "number: ishare2 search <type>\n"
    echo "Example: ishare2 pull qemu 4"
    echo "Example: ishare2 pull dynamips 5"
    echo -e "Example: ishare2 pull bin 6"
}

function tgz_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".tgz"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")
        echo -e "${YELLOW} [-] Extracting: $FOLDERNAME$EXTENSION file... ${NO_COLOR}"
        tar -xf "$file" --strip-components 1 -C "$DIR"
        rm "$file"
        echo -e "${GREEN} [+] Extracted: $DIR. Image ready to use. ${NO_COLOR}"
    fi
}

function tar_gz_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".tar.gz"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")
        echo -e "${YELLOW} [-] Extracting: $FOLDERNAME$EXTENSION file... ${NO_COLOR}"
        tar -xf "$file" --strip-components 1 -C "$DIR"
        rm "$file"
        echo -e "${GREEN} [+] Extracted: $DIR. Image ready to use. ${NO_COLOR}"
    fi
}

function tar_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".tar"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")
        echo -e "${YELLOW} [-] Extracting: $FOLDERNAME$EXTENSION file... ${NO_COLOR}"
        tar -xf "$file" --strip-components 1 -C "$DIR"
        rm "$file"
        echo -e "${GREEN} [+] Extracted: $DIR. Image ready to use. ${NO_COLOR}"
    fi
}

function zip_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".zip"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")
        echo -e "${YELLOW} [-] Extracting: $FOLDERNAME$EXTENSION file... ${NO_COLOR}"
        unzip -a -j "$file" -d "$DIR"
        rm "$file"
        echo -e "${GREEN} [+] Extracted: $DIR. Image ready to use. ${NO_COLOR}"
    fi
}

function rar_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".rar"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")

        if ! [[ -e /usr/bin/unrar ]]; then
            apt -qq update >/dev/null 2>&1 && apt -qq install --assume-yes unrar >/dev/null 2>&1
        fi

        echo -e "${YELLOW} [-] Extracting: $FOLDERNAME$EXTENSION file... ${NO_COLOR}"
        unrar e "$file" "$DIR" >/dev/null 2>&1
        echo -e "${GREEN} [+] Extracted: $DIR. Image ready to use. ${NO_COLOR}"
        rm "$file"
    fi
}

function ova_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".ova"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        COMPRESSED_FILE=$(ls "${DIR}"/*"$EXTENSION")
        echo -e "${YELLOW} [-] Extracting: $FOLDERNAME$EXTENSION file... ${NO_COLOR}"
        tar -xvf "$COMPRESSED_FILE" -C "$DIR"
        rm "$COMPRESSED_FILE"
        echo -e "${GREEN} [+] Extracted: $DIR. Image ready to use. ${NO_COLOR}"
    fi
}

function iso_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".iso"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        ISO_FILE=$(ls "${DIR}"/*"$EXTENSION")

        if ! [[ "${ISO_FILE: -9}" == "cdrom.iso" ]]; then
            mv "$ISO_FILE" "$DIR"/cdrom.iso # Rename file
        fi

        if [[ $FILES_COUNTER -eq 1 ]]; then
            /opt/qemu/bin/qemu-img create -f qcow2 "$DIR"/virtioa.qcow2 20G
        fi
    fi
}

function yml_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSIONS=(".yml" ".yaml")
    #YML_DIR="/opt/unetlab/html/templates/" # Value passed from set_yml_template_folder_location()

    for ext in "${EXTENSIONS[@]}"; do
        if ls "${DIR}"/*"$ext" &>/dev/null; then
            file=$(ls "${DIR}"/*"$ext" | head -1)
            cp "$file" "$YML_DIR"
            break
        fi
    done
}

function txt_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSIONS=(".txt" ".md")

    for ELEMENT in "$DIR"/*; do
        for EXTENSION in "${EXTENSIONS[@]}"; do
            if [[ "${ELEMENT: -${#EXTENSION}}" == "$EXTENSION" ]]; then
                echo -e "\nReading file: $ELEMENT\n"
                cat "$ELEMENT"
                echo -e
                break
            fi
        done
    done
}

function sh_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".sh"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")
        chmod +x "$file"
        echo -e "This image includes a script file: $file"
        read -p "Do you want to run $file? [y/n]: " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            bash "$file"
        else
            echo -e "${YELLOW} [!] $file was not executed. ${NO_COLOR}"
            echo -e "${YELLOW} [!] WARN: This script file might be needed for the image to work properly. ${NO_COLOR}"
        fi
    fi
}

function png_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".png"
    PNG_DIR="/opt/unetlab/html/images/icons/"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")

        # Change .png filename for a Huawei device: from ne5000e.png to ne.png
        if [[ $file == "/opt/unetlab/addons/qemu/huaweine5ke-ne5000e/ne5000e.png" ]]; then
            NEW_PNG_FILENAME="/opt/unetlab/addons/qemu/huaweine5ke-ne5000e/ne.png"
            mv "$file" $NEW_PNG_FILENAME
            file=$NEW_PNG_FILENAME
        fi

        cp "$file" $PNG_DIR
    fi
}

function php_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".php"
    PHP_DIR="/opt/unetlab/html/devices/qemu/"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        file=$(ls "${DIR}"/*"$EXTENSION")
        cp "$file" $PHP_DIR
    fi
}

function vmdk_files_function() {
    FOLDERNAME=$1

    DIR="/opt/unetlab/addons/qemu/$FOLDERNAME"

    EXTENSION=".vmdk"

    if ls "${DIR}"/*"$EXTENSION" &>/dev/null; then
        VMDK_FILE=$(ls "${DIR}"/*"$EXTENSION")
        install_qemu_tools

        echo -e "\nConverting .vmdk to .qcow2. It might take a while..."
        /opt/qemu/bin/qemu-img convert -p -f vmdk -O qcow2 "$VMDK_FILE" "$DIR"/hda.qcow2
        echo "File converted successfully"
        rm "$VMDK_FILE"
    fi
}

function install_qemu_tools() {
    apt update
    apt install -y qemu-utils
    # check if qemu-img is installed
    if ! [[ -e /opt/qemu/bin/qemu-img ]]; then
        echo -e "${RED} [-] qemu-img is not installed. Please install it manually. ${NO_COLOR}"
    fi
}

function check_if_yml_template_is_missing() {
    FOLDERNAME=$1

    #YML_DIR="/opt/unetlab/html/templates/" # Value getted from set_yml_template_folder_location()

    TEMPLATE_NAME="$(cut -d'-' -f1 <<<"$FOLDERNAME")"
    EXTENSION=".yml"

    FULL_TEMPLATE_PATH=$YML_DIR"$TEMPLATE_NAME"$EXTENSION

    if ! [[ -e $FULL_TEMPLATE_PATH ]]; then
        STR="\n ${YELLOW}[-] WARN: Template $FULL_TEMPLATE_PATH is missing, so device might not show up in the list of nodes. ${NO_COLOR}"
        echo -e "$STR\033[0m"
    fi
}

function corrections_for_iol_images() {
    NAME=$1

    if [[ $NAME = "L2-Adventerprisek9-ms.nov3_2015_high_iron.bin" ]]; then
        NAME="i86bi_linux_l2-L2-Adventerprisek9-ms.nov3_2015_high_iron.bin"

        FILE="$YML_DIR"i86bi_linux_l2.yml
        if ! [[ -e $FILE ]]; then
            wget -O "$FILE" "$URL_I86BI_LINUX_L2_YML" >/dev/null 2>&1
        fi
    fi

    if [[ $NAME = "L3-ADVENTERPRISEK9-M-15.4-2T.bin" ]]; then
        NAME="i86bi_linux_l3-L3-ADVENTERPRISEK9-M-15.4-2T.bin"

        FILE="$YML_DIR"i86bi_linux_l3.yml
        if ! [[ -e $FILE ]]; then
            wget -O "$FILE" "$URL_I86BI_LINUX_L3_YML" >/dev/null 2>&1
        fi
    fi
}

function corrections_for_qemu_images_in_lab_function() {
    QEMU_NAME=$1

    if [[ $QEMU_NAME = "huaweicx-V800R011" ]]; then QEMU_NAME="cx"; fi
    if [[ $QEMU_NAME = "huaweine40e-ne40e" ]]; then QEMU_NAME="ne40e"; fi
    if [[ $QEMU_NAME = "huaweine5ke-ne5000e" ]]; then QEMU_NAME="ne5000e"; fi
    if [[ $QEMU_NAME = "huaweine9k-ne9000" ]]; then QEMU_NAME="ne9000"; fi
    if [[ $QEMU_NAME = "huaweice6800-ce6800" ]]; then QEMU_NAME="ce6800"; fi
    if [[ $QEMU_NAME = "huaweice12800-ce12800" ]]; then QEMU_NAME="ce12800"; fi
    if [[ $QEMU_NAME = "cips-7.0.8" ]]; then QEMU_NAME="vIPS-7.0.8"; fi
    if [[ $QEMU_NAME = "catalyst8000v-17.07.01a" ]]; then QEMU_NAME="c8000v-17.07.01a"; fi
    if [[ $QEMU_NAME = "linux-kali2020-epiol" ]]; then QEMU_NAME="kali-2020-epiol"; fi
}

function corrections_for_qemu_images() {
    # Delete ,,, characters (if present) at the end of the FILE6LINK variable (6th element to download)
    if [[ "${FILE6LINK: -4}" == *",,,"* ]]; then FILE6LINK=${FILE6LINK::-4}; fi
    if [[ $FOLDERNAME = "cx" ]]; then FOLDERNAME="huaweicx-V800R011"; fi
    if [[ $FOLDERNAME = "ne40e" ]]; then FOLDERNAME="huaweine40e-ne40e"; fi
    if [[ $FOLDERNAME = "ne5000e" ]]; then FOLDERNAME="huaweine5ke-ne5000e"; fi
    if [[ $FOLDERNAME = "ne9000" ]]; then FOLDERNAME="huaweine9k-ne9000"; fi
    if [[ $FOLDERNAME = "ce6800" ]]; then FOLDERNAME="huaweice6800-ce6800"; fi
    if [[ $FOLDERNAME = "ce12800" ]]; then FOLDERNAME="huaweice12800-ce12800"; fi
    if [[ $FOLDERNAME = "vIPS-7.0.8" ]]; then FOLDERNAME="cips-7.0.8"; fi
    if [[ $FOLDERNAME = "c8000v-17.07.01a" ]]; then FOLDERNAME="catalyst8000v-17.07.01a"; fi
    if [[ $FOLDERNAME = "kali-2020-epiol" ]]; then FOLDERNAME="linux-kali2020-epiol"; fi
}

function corrections_for_dynamips_images() {
    NAME=$1

    SUBSTRING="c2600"
    if [[ "$NAME" == *"$SUBSTRING"* ]]; then
        FILE="$YML_DIR"c2600.yml
        wget -O "$FILE" "$URL_C2600_YML" >/dev/null 2>&1
    fi

    SUBSTRING="c1760"
    if [[ "$NAME" == *"$SUBSTRING"* ]]; then
        FILE="$YML_DIR"c1760.yml
        wget -O "$FILE" "$URL_C1760_YML" >/dev/null 2>&1
    fi
}

function pull_images() {
    IMAGE_TYPE=$1
    IMAGE_ID=$2
    OVERWRITE=$3

    # 0. Check parameters
    # Check if IMAGE_ID is not empty and is a number
    if [[ -z "$IMAGE_ID" || ! "$IMAGE_ID" =~ ^[0-9]+$ ]]; then
        echo -e "Syntax:\nishare2 pull [type] [ID]"
        echo "type: bin, qemu or dynamips"
        echo -e "ID: [1-9999]\n"
        echo "Example: ishare2 pull qemu 4"
        echo "Example: ishare2 pull dynamips 5"
        echo -e "Example: ishare2 pull bin 6"
        exit 1
    fi

    if [ "$IMAGE_TYPE" = "BIN" ]; then
        IMAGE_TYPE="IOL"
    else
        IMAGE_TYPE="$1"
    fi
    local download_urls
    local download_path # Pending: implement corrections_for_qemu_images function with new JSON structure
    local image_name
    local image_size

    # 1. Fetch the JSON file
    fetch_json

    # Extract the download URLs, path, name, and size for the specified type and ID
    download_urls=$(jq -r --arg type "$IMAGE_TYPE" --arg id "$IMAGE_ID" '.[$type][] | select(.id == ($id | tonumber)) | .download_links[]' "$TEMP_JSON")
    download_path=$(jq -r --arg type "$IMAGE_TYPE" --arg id "$IMAGE_ID" '.[$type][] | select(.id == ($id | tonumber)) | .download_path' "$TEMP_JSON")
    image_name=$(jq -r --arg type "$IMAGE_TYPE" --arg id "$IMAGE_ID" '.[$type][] | select(.id == ($id | tonumber)) | .name' "$TEMP_JSON")
    image_size=$(jq -r --arg type "$IMAGE_TYPE" --arg id "$IMAGE_ID" '.[$type][] | select(.id == ($id | tonumber)) | .size' "$TEMP_JSON")

    # 2. Download the image(s) for the specified type and ID
    # Skip download if the image is already installed
    FOLDERNAME="$image_name"
    IMAGE_TYPE_LOWER=$(echo "$IMAGE_TYPE" | tr '[:upper:]' '[:lower:]')

    case "$IMAGE_TYPE" in
    "QEMU")
        IMAGE_PATH="/opt/unetlab/addons/$IMAGE_TYPE_LOWER/$FOLDERNAME"
        if [ -d "$IMAGE_PATH" ] && [ "$OVERWRITE" != "--overwrite" ]; then
            echo "Folder $FOLDERNAME already exists in server for Type: $IMAGE_TYPE"
            exit 1
        fi
        ;;
    "BIN" | "IOL")
        IMAGE_PATH="/opt/unetlab/addons/$IMAGE_TYPE_LOWER/bin/$image_name"
        if [ -e "$IMAGE_PATH" ] && [ "$OVERWRITE" != "--overwrite" ]; then
            echo "File $image_name already exists in server for Type: $IMAGE_TYPE. Use --overwrite to overwrite it"
            exit 1
        fi
        ;;
    "DYNAMIPS")
        IMAGE_PATH="/opt/unetlab/addons/$IMAGE_TYPE_LOWER/$image_name"
        if [ -e "$IMAGE_PATH" ] && [ "$OVERWRITE" != "--overwrite" ]; then
            echo "File $image_name already exists in server for Type: $IMAGE_TYPE. Use --overwrite to overwrite it"
            exit 1
        fi
        ;;
    *)
        echo "Invalid image type: $IMAGE_TYPE"
        exit 1
        ;;
    esac

    if [ -n "$download_urls" ]; then
        echo "Downloading image for Type: $IMAGE_TYPE, ID: $IMAGE_ID"
        echo "Download Path: $download_path"
        echo "Image Name: $image_name"
        echo "Image Size: $image_size"
        # Create the directory if it doesn't exist
        mkdir -p "$download_path"

        # Iterate through the download URLs and download each file
        case $IMAGE_TYPE in
        "QEMU")
            for download_url in $download_urls; do
                download_file "$download_url" "$download_path"
            done
            ;;
        "BIN" | "DYNAMIPS" | "IOL")
            for download_url in $download_urls; do
                download_file "$download_url" "$download_path" "$image_name"
            done
            ;;
        *)
            echo "Something went wrong"
            ;;
        esac

        echo "Download complete."
    else
        echo "Image not found for Type: $IMAGE_TYPE, ID: $IMAGE_ID"
    fi

    # 3. Handle downloaded files if TYPE is QEMU
    if [ "$IMAGE_TYPE" = "QEMU" ]; then
        # 3.1. Extract archives
        tgz_files_function "$FOLDERNAME"
        tar_gz_files_function "$FOLDERNAME"
        tar_files_function "$FOLDERNAME"
        zip_files_function "$FOLDERNAME"
        rar_files_function "$FOLDERNAME"
        ova_files_function "$FOLDERNAME"
        iso_files_function "$FOLDERNAME"

        # 3.2. Handle other files
        yml_files_function "$FOLDERNAME"
        txt_files_function "$FOLDERNAME"
        sh_files_function "$FOLDERNAME"
        png_files_function "$FOLDERNAME"
        php_files_function "$FOLDERNAME"
        vmdk_files_function "$FOLDERNAME"

        # 3.3. Show if .yml templates are missing
        check_if_yml_template_is_missing "$FOLDERNAME"
        # 3.4. Apply fix permissions command
        fix_permissions
    fi
}

function fix_permissions() {
    /opt/unetlab/wrappers/unl_wrapper -a fixpermissions
    if [[ $? -eq 0 ]]; then
        echo -e "\n${GREEN} [+] Fix permissions command has been executed correctly ${NO_COLOR}"
    else
        echo -e "\n${RED} [-] Failed to fix permissions ${NO_COLOR}"
    fi
}

function connection_tests() {
    # Define an associative array with service names and their respective IP addresses or domains
    declare -A SERVICES=(
        ["GitHub"]="github.com"
        ["GitHub Raw Files"]="raw.githubusercontent.com"
        ["LabHub (Onedrive)"]="labhub.eu.org"
        ["LabHub (Google Drive)"]="drive.labhub.eu.org"
        ["Google DNS"]="8.8.8.8"
    )

    # Header
    echo -e "${YELLOW} [-] Running connection tests... ${NO_COLOR}"

    # Loop through the services and check their reachability
    for service in "${!SERVICES[@]}"; do
        echo -e "${YELLOW} [-] Checking if $service is reachable... ${NO_COLOR}"
        if ping -q -c 5 -W 5 "${SERVICES[$service]}" >/dev/null; then
            echo -e "${GREEN} [+] $service is reachable. ${NO_COLOR}"
        else
            echo -e "${RED} [-] $service is not reachable ${NO_COLOR}"
        fi
    done

    # Checks completed
    echo -e "${YELLOW} [-] Connection tests completed. ${NO_COLOR}"
}

function selector() {
    case "$1" in
    "search")
        # Switch case to determine the type of the device to be displayed
        case "$2" in
        "qemu" | "iol" | "dynamips")
            TYPE="${2^^}" # Convert to uppercase
            display_images "$TYPE"
            ;;
        "bin")
            TYPE="IOL" # Treat "bin" as "iol" in uppercase
            display_images "$TYPE"
            ;;
        "all")
            for type in "QEMU" "IOL" "DYNAMIPS"; do
                TYPE="${type^^}" # Convert to uppercase
                display_images "$TYPE"
                echo
            done
            ;;
        *)
            if [ -n "$2" ]; then
                FILTER="$2"
                for type in "QEMU" "IOL" "DYNAMIPS"; do
                    TYPE="${type^^}"
                    display_images "$TYPE"
                    echo
                done
            else
                echo "Usage: $0 [qemu|iol|dynamips|all]"
                exit 1
            fi
            ;;
        esac
        ;;
    "pull")
        case "$2" in
        "qemu" | "iol" | "dynamips" | "bin")
            TYPE="${2^^}" # Convert to uppercase
            pull_images "$TYPE" "$3" "$4"
            ;;
        *) # If the type is not specified, print the usage
            echo "Usage: $0 pull [qemu|iol|dynamips|bin] [ID]"
            ;;
        esac
        ;;
    "installed")
        if [[ "$2" ]]; then
            case "$2" in
            "all")
                echo -e "${GREEN}----- QEMU -----${NO_COLOR}"
                ishare2 installed qemu
                echo -e "${GREEN}----- DYNAMIPS -----${NO_COLOR}"
                ishare2 installed dynamips
                echo -e "${GREEN}----- BIN -----${NO_COLOR}"
                ishare2 installed bin
                echo -e "${GREEN}----- DOCKER -----${NO_COLOR}"
                ishare2 installed docker
                ;;
            "qemu")
                echo -e
                tree -hp /opt/unetlab/addons/qemu/
                echo -e
                ;;
            "dynamips")
                echo -e
                tree -hp /opt/unetlab/addons/dynamips/
                echo -e
                ;;
            "bin")
                echo -e
                tree -hp /opt/unetlab/addons/iol/bin/
                echo -e
                ;;
            "docker")
                list_dockers
                count_dockers
                ;;
            *)
                echo -e "Syntax:\n\nishare2 installed <type>"
                echo -e "${YELLOW}type: all, bin, qemu, dynamips or docker${NO_COLOR}"
                ;;
            esac
        else
            echo -e "Syntax:\n\nishare2 installed ${YELLOW}<type>${NO_COLOR}"
            echo -e "type: all, bin, qemu, dynamips or docker"
        fi
        ;;
    "labs")
        if [[ "$2" ]]; then
            if [[ "$2" = "all" ]]; then
                install_lab_images_just_for_only_readable_labs_ALL
                exit 0
            else
                install_lab_images_just_for_only_readable_labs "$2"
                exit 0
            fi
        fi
        get_lab_list_just_for_only_readable_labs
        ;;
    "mylabs")
        if [[ "$2" ]]; then
            if [[ "$3" ]]; then
                if [[ "$3" == "all" ]]; then
                    mylabs_install_lab_images_just_for_only_readable_labs_ALL "$2" all
                else
                    if ! [[ -z "${3##*[!0-9]*}" ]]; then
                        mylabs_install_lab_images_just_for_only_readable_labs "$2" "$3"
                    else
                        STR="The last parameter must be a number"
                        echo -e "${RED}$STR${NO_COLOR}"
                        echo -e "ishare2 mylabs <path> ${YELLOW}<number>${NO_COLOR}"
                    fi
                fi
            else
                mylabs_get_lab_list_just_for_only_readable_labs "$2"
            fi
        else
            echo -e "Syntax:\n\nishare2 mylabs <path>"
            echo "ishare2 mylabs <path> <number>"
            echo -e "ishare2 mylabs <path> all"
        fi
        ;;
    "relicense")
        generate_a_new_license
        ;;
    "upgrade")
        menu_ishare2_upgrade
        ;;
    "changelog")
        show_changelog
        ;;
    "gui")
        if [[ "$2" ]]; then
            case "$2" in
            "install")
                ishare2_gui_install
                ;;
            "start")
                ishare2_gui_start
                ;;
            "stop")
                ishare2_gui_stop
                ;;
            "restart")
                ishare2_gui_restart
                ;;
            *)
                echo -e "${RED}Bad last argument${NO_COLOR}"
                echo -e "Syntax:\n\nishare2 gui <option>\n"
                echo "ishare2 gui download"
                echo -e "ishare2 gui start"
                echo -e "ishare2 gui stop"
                echo -e "ishare2 gui restart"
                ;;
            esac
        else
            echo -e "Syntax:\n\nishare2 gui <option>\n"
            echo "ishare2 gui download"
            echo -e "ishare2 gui start"
            echo -e "ishare2 gui stop"
            echo -e "ishare2 gui restart"
        fi
        ;;
    "help")
        show_help_info
        ;;
    "test")
        connection_tests
        ;;
    "config")
        switch_downloader
        ;;
    *)
        show_ishare2_usage
        ;;
    esac
}

function main() {
    if [[ "$1" = "test" ]]; then
        connection_tests
        exit 0
    fi
    check_user_is_root
    check_ishare2_dir
    check_config
    set_max_log_lines
    set_yml_template_folder_location
    check_ishare2_version_file_exists
    selector "$1" "$2" "$3" "$4"
}

main "$@"
